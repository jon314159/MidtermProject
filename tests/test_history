import os
import pandas as pd
import pytest
from typing import Sequence
from pathlib import Path
from unittest.mock import patch
from app.history import AutoSaveObserver, HistoryObserver
from app.calculation import Calculation, CalculationFactory
from app.exceptions import FileProcessingError

# -----------------------
# Dummy Classes for Base Testing
# -----------------------

class DummyCalculation(Calculation):
    def __init__(self):
        super().__init__(1.0, 2.0)
        self.result = 3.0

    def execute(self) -> float:
        if self.result is None:
            raise ValueError("Result is not set")
        return self.result

# -----------------------
# HistoryObserver Tests
# -----------------------

def test_history_observer_not_implemented():
    observer = DummyObserver()
    calc = DummyCalculation()
    with pytest.raises(NotImplementedError):
        observer.update(calc)

class DummyObserver(HistoryObserver):
    def update(self, calculation):
        raise NotImplementedError("Must override update()")

def test_dummy_observer_update_raises():
    observer = DummyObserver()
    with pytest.raises(NotImplementedError):
        observer.update(DummyCalculation())

# -----------------------
# AutoSaveObserver Tests
# -----------------------

def test_autosave_observer_init_creates_output_dir(tmp_path):
    history: Sequence[Calculation] = []
    output_file = tmp_path / "nested" / "history.csv"
    observer = AutoSaveObserver(history=history, output_file=str(output_file))
    assert observer.output_file == str(output_file)
    assert output_file.parent.exists()

def test_autosave_observer_saves_csv(tmp_path):
    history: Sequence[Calculation] = [CalculationFactory.create_calculation("add", 2, 3)]
    history[0].result = 5.0
    output_file = tmp_path / "history.csv"
    observer = AutoSaveObserver(history=history, output_file=str(output_file))
    observer.update(history[0])
    assert output_file.exists()
    df = pd.read_csv(output_file)
    assert df.iloc[0]["operand1"] == 2
    assert df.iloc[0]["result"] == 5

def test_autosave_observer_raises_fileprocessingerror(tmp_path):
    calc = CalculationFactory.create_calculation("add", 1, 1)
    calc.result = 2.0
    history: Sequence[Calculation] = [calc]
    output_file = tmp_path / "bad.csv"
    observer = AutoSaveObserver(history=history, output_file=str(output_file))
    with patch("pandas.DataFrame.to_csv", side_effect=IOError("Write failed")):
        with pytest.raises(FileProcessingError) as exc:
            observer.update(calc)
        assert "Error saving history" in str(exc.value)

# -----------------------
# Extra test for __init__ default config
# -----------------------

def test_autosave_observer_default_output_path(monkeypatch):
    monkeypatch.setattr("app.history.CALCULATOR_HISTORY_DIR", "custom_hist_dir")
    monkeypatch.setattr("app.history.CALCULATOR_DEFAULT_ENCODING", "utf-8")
    history: Sequence[Calculation] = [DummyCalculation()]
    observer = AutoSaveObserver(history=history)
    assert "custom_hist_dir" in observer.output_file
    assert observer.output_file.endswith("history.csv")
